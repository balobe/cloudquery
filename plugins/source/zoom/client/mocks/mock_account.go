// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/zoom/client (interfaces: AccountService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zoom "github.com/himalayan-institute/zoom-lib-golang"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// GetAccountLockSettings mocks base method.
func (m *MockAccountService) GetAccountLockSettings(arg0 zoom.GetAccountLockSettingsOpts) (zoom.AccountLockSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountLockSettings", arg0)
	ret0, _ := ret[0].(zoom.AccountLockSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLockSettings indicates an expected call of GetAccountLockSettings.
func (mr *MockAccountServiceMockRecorder) GetAccountLockSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLockSettings", reflect.TypeOf((*MockAccountService)(nil).GetAccountLockSettings), arg0)
}

// GetAccountManagedDomains mocks base method.
func (m *MockAccountService) GetAccountManagedDomains(arg0 zoom.GetAccountManagedDomainsOpts) (zoom.AccountManagedDomains, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountManagedDomains", arg0)
	ret0, _ := ret[0].(zoom.AccountManagedDomains)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountManagedDomains indicates an expected call of GetAccountManagedDomains.
func (mr *MockAccountServiceMockRecorder) GetAccountManagedDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountManagedDomains", reflect.TypeOf((*MockAccountService)(nil).GetAccountManagedDomains), arg0)
}

// GetAccountSettings mocks base method.
func (m *MockAccountService) GetAccountSettings(arg0 zoom.GetAccountSettingsOpts) (zoom.AccountSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettings", arg0)
	ret0, _ := ret[0].(zoom.AccountSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettings indicates an expected call of GetAccountSettings.
func (mr *MockAccountServiceMockRecorder) GetAccountSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettings", reflect.TypeOf((*MockAccountService)(nil).GetAccountSettings), arg0)
}

// GetAccountTrustedDomains mocks base method.
func (m *MockAccountService) GetAccountTrustedDomains(arg0 zoom.GetAccountTrustedDomainsOpts) (zoom.AccountTrustedDomains, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTrustedDomains", arg0)
	ret0, _ := ret[0].(zoom.AccountTrustedDomains)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTrustedDomains indicates an expected call of GetAccountTrustedDomains.
func (mr *MockAccountServiceMockRecorder) GetAccountTrustedDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTrustedDomains", reflect.TypeOf((*MockAccountService)(nil).GetAccountTrustedDomains), arg0)
}
