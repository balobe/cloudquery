// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/zoom/client (interfaces: RecordingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zoom "github.com/himalayan-institute/zoom-lib-golang"
)

// MockRecordingService is a mock of RecordingService interface.
type MockRecordingService struct {
	ctrl     *gomock.Controller
	recorder *MockRecordingServiceMockRecorder
}

// MockRecordingServiceMockRecorder is the mock recorder for MockRecordingService.
type MockRecordingServiceMockRecorder struct {
	mock *MockRecordingService
}

// NewMockRecordingService creates a new mock instance.
func NewMockRecordingService(ctrl *gomock.Controller) *MockRecordingService {
	mock := &MockRecordingService{ctrl: ctrl}
	mock.recorder = &MockRecordingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordingService) EXPECT() *MockRecordingServiceMockRecorder {
	return m.recorder
}

// ListAllRecordings mocks base method.
func (m *MockRecordingService) ListAllRecordings(arg0 zoom.ListAllRecordingsOptions) (zoom.ListAllRecordingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRecordings", arg0)
	ret0, _ := ret[0].(zoom.ListAllRecordingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRecordings indicates an expected call of ListAllRecordings.
func (mr *MockRecordingServiceMockRecorder) ListAllRecordings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRecordings", reflect.TypeOf((*MockRecordingService)(nil).ListAllRecordings), arg0)
}
