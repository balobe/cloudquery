// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudquery/cloudquery/plugins/source/zoom/client (interfaces: MeetingService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zoom "github.com/himalayan-institute/zoom-lib-golang"
)

// MockMeetingService is a mock of MeetingService interface.
type MockMeetingService struct {
	ctrl     *gomock.Controller
	recorder *MockMeetingServiceMockRecorder
}

// MockMeetingServiceMockRecorder is the mock recorder for MockMeetingService.
type MockMeetingServiceMockRecorder struct {
	mock *MockMeetingService
}

// NewMockMeetingService creates a new mock instance.
func NewMockMeetingService(ctrl *gomock.Controller) *MockMeetingService {
	mock := &MockMeetingService{ctrl: ctrl}
	mock.recorder = &MockMeetingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeetingService) EXPECT() *MockMeetingServiceMockRecorder {
	return m.recorder
}

// GetMeeting mocks base method.
func (m *MockMeetingService) GetMeeting(arg0 zoom.GetMeetingOptions) (zoom.Meeting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeeting", arg0)
	ret0, _ := ret[0].(zoom.Meeting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeeting indicates an expected call of GetMeeting.
func (mr *MockMeetingServiceMockRecorder) GetMeeting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeeting", reflect.TypeOf((*MockMeetingService)(nil).GetMeeting), arg0)
}

// ListMeetings mocks base method.
func (m *MockMeetingService) ListMeetings(arg0 zoom.ListMeetingsOptions) (zoom.ListMeetingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeetings", arg0)
	ret0, _ := ret[0].(zoom.ListMeetingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeetings indicates an expected call of ListMeetings.
func (mr *MockMeetingServiceMockRecorder) ListMeetings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeetings", reflect.TypeOf((*MockMeetingService)(nil).ListMeetings), arg0)
}
